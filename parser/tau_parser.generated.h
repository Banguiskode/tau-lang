// This file is generated by
//       https://github.com/IDNI/parser/tools/parser_gen
//
// from the grammar in file ../tau-lang/parser/tau.tgf:
//
// @use_char_class eof, space, digit, xdigit, alpha, alnum, punct, printable.
//
// #
// # as a rule of thumb, to ease navigation of the corresponding tree, the
// # non-terminals shouldn't appear in * or + expressions. Otherwise,
// # intermediate non terminals would be created and break the expected tree
// # structure
// #
//
// # whitespace and comments
// eol				=> '\n' | '\r' | eof.
// ws_comment		=> '#' eol | '#' printable+ eol.
// ws_required		=> space ws | ws_comment ws.
// ws				=> ws_required | null.
//
// # characters
// hex_escape			=> "\\x" xdigit xdigit.
// unicode_escape		=> "\\u" xdigit xdigit xdigit xdigit.
// char_escape_encode	=> hex_escape | unicode_escape.
//
// # defining char/string/qstring as all chars but its wrapping character
// # enables using TAB and new lines in char(')/string(")/bqstring(`)
// # sequences
//
// # common stuff copy cut from tml grammar
// esc				=> "\\\\".
// q_char			=> '\''.
// q_str			=> '"'.
// q_bqstr			=> '`'.
// char_punct		=> punct & ~q_char & ~q_str & ~q_bqstr
// 					& ~(esc q_char) & ~(esc q_str) & ~(esc q_bqstr).
// char0			=> alnum | space | char_escape_encode | char_punct.
// char_			=> char0 | esc q_char |     q_str |     q_bqstr.
// string_char		=> char0 |     q_char | esc q_str |     q_bqstr.
// bqstring_char	=> char0 |     q_char |     q_str | esc q_bqstr.
// chars			=> alpha (alnum)*.
// char_class    	=> "eof" | "alnum" | "alpha" | "blank" | "cntrl" | "digit"
// 				| "graph" | "lower" | "printable" | "punct" | "space"
// 				| "upper" | "xdigit".
// digits			=> digit (digit)*.
//
// # common symbols
// definition			=> ws ":=" ws.
// dot 				=> ws '.' ws.
// open_parenthesis	=> ws '(' ws.
// close_parenthesis	=> ws ')' ws.
// open_bracket		=> ws '[' ws.
// close_bracket		=> ws ']' ws.
// open_brace			=> ws '{' ws.
// close_brace			=> ws '}' ws.
// minus				=> ws '-' ws.
// colon				=> ws ':' ws.
// less				=> ws '<' ws.
// comma 				=> ws ',' ws.
//
// # elements
// sym				=> chars.
//
// # offsets
// offsets			=> open_bracket step (comma offset)* close_bracket.
// offset			=> num | capture | shift.
// step			=> num | capture | shift.
// shift 			=> capture minus num.
// num				=> ws digits ws.
//
// variable		=> var | timed.
// timed			=> (in | out)  offsets.
//
// capture			=> '$' chars.
// var				=> chars.
// in				=> "?i_" chars. # instead of '<', easy to remember
// out				=> "?o_" chars. # instead of '>', easy to remember
//
// # wff
// wff_rule			=> wff_matcher definition wff_body dot.
// wff_rec_relation	=> wff_ref definition wff dot.
//
// wff_matcher	=> wff | wff_ref.
// wff_body	=> wff | bf_eq_cb | bf_neq_cb | wff_has_clashing_subformulas_cb
// 				| wff_has_subformula_cb | wff_remove_existential.
//
// # TODO (MEDIUM) check programatically that no capture is use in a rec_relation as wff
// wff 			=> wff_ref | wff_and | wff_neg | wff_xor | wff_conditional
// 					| wff_or | wff_all | wff_ex | wff_imply | wff_equiv
// 					| wff_t | wff_f | capture
// 					| bf_eq | bf_neq | bf_less | bf_less_equal | bf_greater.
// wff_ref			=> sym offsets wff_ref_args.
// wff_ref_args	=> open_parenthesis (variable)* close_parenthesis.
// wff_and			=> open_parenthesis wff wff_and_sym wff close_parenthesis.
// wff_or			=> open_parenthesis wff wff_or_sym wff close_parenthesis.
// wff_xor			=> open_parenthesis wff wff_xor_sym wff close_parenthesis.
// wff_conditional	=> open_parenthesis wff wff_conditional_sym wff colon wff close_parenthesis.
// wff_neg			=> wff_neg_sym wff.
// wff_imply		=> open_parenthesis wff wff_imply_sym wff close_parenthesis.
// wff_equiv		=> open_parenthesis wff wff_equiv_sym wff close_parenthesis.
// wff_all			=> wff_all_sym (variable|capture) ws_required wff.
// wff_ex			=> wff_ex_sym ws_required (variable|capture) ws_required wff.
//
// # relational operators
// #
// # they are named bf_* as they involve boolean functions,
// # but they are not boolean functions themselves, they return a T/F wff value
// # and hence, should be considered as wffs
// bf_eq 			=> open_parenthesis bf bf_equality_sym bf close_parenthesis.
// bf_neq 			=> open_parenthesis bf bf_nequality_sym bf close_parenthesis.
// bf_less			=> open_parenthesis bf bf_less_sym bf close_parenthesis.
// bf_less_equal	=> open_parenthesis bf bf_less_equal_sym bf close_parenthesis.
// bf_greater		=> open_parenthesis bf bf_greater_sym bf close_parenthesis.
//
// # wff_op_sym
// wff_and_sym			=> ws "&&" ws.
// wff_or_sym			=> ws "||" ws.
// wff_xor_sym			=> ws '^' ws.
// wff_conditional_sym	=> ws '?' ws.
// wff_neg_sym			=> ws '!' ws.
// wff_imply_sym		=> ws "->" ws.
// wff_equiv_sym		=> ws "<->" ws.
// wff_all_sym			=> ws "all" ws.
// wff_ex_sym			=> ws "ex" ws.
// wff_t				=> ws 'T' ws.
// wff_f				=> ws 'F' ws.
//
// # bf
// bf_rule		=> bf_matcher definition bf_body dot.
// bf_rec_relation	=> bf_ref definition bf dot.
//
// bf_matcher	=> bf.
// bf_body 	=> bf | bf_is_zero_cb | bf_is_one_cb | bf_has_clashing_subformulas_cb
// 				| bf_has_subformula_cb.
//
// # TODO (MEDIUM) remove bf_subs_cb and add a callback to eliminate fall and fex
// bf			=> bf_ref | bf_constant | bf_and | bf_neg | bf_xor | bf_or
// 				| bf_all | bf_ex
// 				| bf_subs_cb | bf_t | bf_f | variable | capture.
// bf_ref 		=> sym offsets bf_ref_args.
// bf_ref_args	=> open_parenthesis (variable)* close_parenthesis.
// bf_and		=> open_parenthesis bf bf_and_sym bf close_parenthesis.
// bf_or		=> open_parenthesis bf bf_or_sym bf close_parenthesis.
// bf_xor		=> open_parenthesis bf bf_xor_sym ws bf close_parenthesis.
// bf_neg		=> bf_neg_sym bf.
// bf_all		=> bf_all_sym ws_required (variable | capture) ws_required bf.
// bf_ex		=> bf_ex_sym ws_required (variable | capture) ws_required bf.
//
// # bf_op_sym
// bf_and_sym			=> ws '&' ws.
// bf_or_sym			=> ws '|' ws.
// bf_xor_sym			=> ws '+' ws.
// bf_neg_sym			=> ws '~' ws.
// bf_equality_sym		=> ws "=" ws.
// bf_nequality_sym	=> ws "!=" ws.
// bf_less_sym			=> ws '<' ws.
// bf_less_equal_sym	=> ws "<=" ws.
// bf_greater_sym		=> ws '>' ws.
// bf_all_sym			=> ws "fall" ws.
// bf_ex_sym			=> ws "fex" ws.
// bf_t				=> ws '1' ws.
// bf_f				=> ws '0' ws.
//
// # constant
// bf_constant		=> open_brace constant close_brace.
//
// #constants
// constant		=>  binding | capture
// 					| bf_and_cb | bf_or_cb | bf_xor_cb | bf_neg_cb.
// binding			=> source_binding | named_binding.
// named_binding	=> chars.
// source_binding	=> type colon source.
// type 			=> chars | null.
//
// # source related definition
// source0			=> alnum | space | char_escape_encode | char_punct.
// source			=> (source0)+.
//
// # callbacks
//
// # callbacks must be used in the following cases:
// #
// # 1.- underlying boolean algebras operations: and, or, xor, neg, less,
// # less_equal, greater, subs, eq, neq, is_zero, is_one,... In this case, no
// # other way we have to call the uderlying operations of the boolean algebra
// # 2.- speed up computations: has_clashing_subformulas, has_subformula,
// # remove_existential... In this case, we could use the the callback to
// # avoid the creation of intermediate formulas. For instance, if we want
// # to check if a formula has a subformula, we could use the callback to
// # avoid the creation of the subformulas to check that point.
// # 3.- to create new subformulas in other rules, for instance, to create a
// # new formula that is the substitution of a variable by a constant.
//
// # TODO (HIGH) earley parser doesn't support tabs in comments
// #
// # This should be move to a TODO in the parsers...
//
// bf_and_cb			=> bf_cb_arg bf_and_cb_sym bf_cb_arg.
// bf_or_cb			=> bf_cb_arg bf_or_cb_sym bf_cb_arg.
// bf_xor_cb			=> bf_cb_arg bf_xor_cb_sym bf_cb_arg.
// bf_neg_cb			=> bf_neg_cb_sym bf_cb_arg.
// bf_subs_cb			=> bf_subs_cb_sym bf_cb_arg ws_required bf_cb_arg ws_required bf_cb_arg.
// bf_eq_cb			=> bf_eq_cb_sym bf_cb_arg ws_required wff_cb_arg ws_required wff_cb_arg.
// bf_neq_cb			=> bf_neq_cb_sym bf_cb_arg ws_required wff_cb_arg ws_required wff_cb_arg.
// bf_is_zero_cb		=> bf_is_zero_cb_sym bf_cb_arg ws_required bf_cb_arg.
// bf_is_one_cb		=> bf_is_one_cb_sym bf_cb_arg ws_required bf_cb_arg.
//
// # extra callbacks to speed up computations
// bf_has_clashing_subformulas_cb	=> bf_has_clashing_subformulas_cb_sym bf_cb_arg ws_required bf_cb_arg.
// wff_has_clashing_subformulas_cb	=> wff_has_clashing_subformulas_cb_sym wff_cb_arg ws_required wff_cb_arg.
// bf_has_subformula_cb 			=> bf_has_subformula_cb_sym bf_cb_arg ws_required bf_cb_arg ws_required bf_cb_arg.
// wff_has_subformula_cb 			=> wff_has_subformula_cb_sym wff_cb_arg ws_required wff_cb_arg ws_required wff_cb_arg.
// wff_remove_existential			=> wff_remove_existential_cb_sym wff_cb_arg ws_required wff_cb_arg.
//
// # bultin_args
// bf_cb_arg	=> capture | bf.
// wff_cb_arg	=> capture | wff.
//
// # bf_cb_syms
// bf_and_cb_sym			=> ws "bf_and_cb" ws.
// bf_or_cb_sym			=> ws "bf_or_cb" ws.
// bf_xor_cb_sym			=> ws "bf_xor_cb" ws.
// bf_neg_cb_sym			=> ws "bf_neg_cb" ws.
// bf_subs_cb_sym			=> ws "bf_subs_cb" ws.
// bf_eq_cb_sym			=> ws "bf_eq_cb" ws.
// bf_neq_cb_sym			=> ws "bf_neq_cb" ws.
// bf_is_zero_cb_sym		=> ws "bf_is_zero_cb" ws.
// bf_is_one_cb_sym		=> ws "bf_is_one_cb" ws.
//
// # speed up callbacks syms
// # IDEA we could reuse the same symbol
// bf_has_clashing_subformulas_cb_sym		=> ws "bf_has_clashing_subformulas_cb" ws.
// bf_has_subformula_cb_sym				=> ws "bf_has_subformula_cb" ws.
// wff_has_clashing_subformulas_cb_sym		=> ws "wff_has_clashing_subformulas_cb" ws.
// wff_has_subformula_cb_sym				=> ws "wff_has_subformula_cb" ws.
// wff_remove_existential_cb_sym			=> ws "wff_remove_existential_cb" ws.
//
// # input definition
// input			=> in colon open_brace source_binding close_brace.
//
//
// # main posibilities
// inputs			=> less input (input)* dot.
// main			=> wff dot.
// rule			=> wff_rule | bf_rule .
// rules			=> (rule)*.
// rec_relation	=> bf_rec_relation | wff_rec_relation dot.
// rec_relations	=> (rec_relation)*.
// formula			=> rec_relations main.
// library 		=> rules.
// # each builder is define on its own string
// builder			=> builder_head definition builder_body dot.
// builder_head	=> open_parenthesis capture (ws_required capture)* close_parenthesis.
// builder_body	=> wff | bf.
// start			=> formula | library | builder | inputs.
//

//
#ifndef __TAU_PARSER_H__
#define __TAU_PARSER_H__
#include <string.h>
#include "parser.h"
struct tau_parser {
	tau_parser() :
		nts(load_nonterminals()), cc(load_cc()),
		g(nts, load_prods(), nt(189), cc), p(g, load_opts()) {}
	std::unique_ptr<typename idni::parser<char, char>::pforest> parse(
		const char* data, size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(data, size, eof); }
	std::unique_ptr<typename idni::parser<char, char>::pforest> parse(
		int fd, size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(fd, size, eof); }
	std::unique_ptr<typename idni::parser<char, char>::pforest> parse(
		std::basic_istream<char>& is,
		size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(is, size, eof); }
	bool found() { return p.found(); }
	typename idni::parser<char, char>::perror_t get_error()
		{ return p.get_error(); }
   enum nonterminal {

			empty_string, eof, space, digit, xdigit, alpha, alnum, punct, printable, eol,
			ws_comment, _Rws_comment_0, ws_required, ws, hex_escape, unicode_escape, char_escape_encode, esc, q_char, q_str,
			q_bqstr, char_punct, _Rchar_punct_1, _Rchar_punct_2, _Rchar_punct_3, char0, char_, string_char, bqstring_char, chars,
			_Rchars_4, _Rchars_5, char_class, digits, _Rdigits_6, _Rdigits_7, definition, dot, open_parenthesis, close_parenthesis,
			open_bracket, close_bracket, open_brace, close_brace, minus, colon, less, comma, sym, offsets,
			step, offset, _Roffsets_8, _Roffsets_9, num, capture, shift, variable, var, timed,
			in, out, _Rtimed_10, wff_rule, wff_matcher, wff_body, wff_rec_relation, wff_ref, wff, bf_eq_cb,
			bf_neq_cb, wff_has_clashing_subformulas_cb, wff_has_subformula_cb, wff_remove_existential, wff_and, wff_neg, wff_xor, wff_conditional, wff_or, wff_all,
			wff_ex, wff_imply, wff_equiv, wff_t, wff_f, bf_eq, bf_neq, bf_less, bf_less_equal, bf_greater,
			wff_ref_args, _Rwff_ref_args_11, _Rwff_ref_args_12, wff_and_sym, wff_or_sym, wff_xor_sym, wff_conditional_sym, wff_neg_sym, wff_imply_sym, wff_equiv_sym,
			wff_all_sym, _Rwff_all_13, wff_ex_sym, _Rwff_ex_14, bf, bf_equality_sym, bf_nequality_sym, bf_less_sym, bf_less_equal_sym, bf_greater_sym,
			bf_rule, bf_matcher, bf_body, bf_rec_relation, bf_ref, bf_is_zero_cb, bf_is_one_cb, bf_has_clashing_subformulas_cb, bf_has_subformula_cb, bf_constant,
			bf_and, bf_neg, bf_xor, bf_or, bf_all, bf_ex, bf_subs_cb, bf_t, bf_f, bf_ref_args,
			_Rbf_ref_args_15, _Rbf_ref_args_16, bf_and_sym, bf_or_sym, bf_xor_sym, bf_neg_sym, bf_all_sym, _Rbf_all_17, bf_ex_sym, _Rbf_ex_18,
			constant, binding, bf_and_cb, bf_or_cb, bf_xor_cb, bf_neg_cb, source_binding, named_binding, type, source,
			source0, _Rsource_19, _Rsource_20, bf_cb_arg, bf_and_cb_sym, bf_or_cb_sym, bf_xor_cb_sym, bf_neg_cb_sym, bf_subs_cb_sym, bf_eq_cb_sym,
			wff_cb_arg, bf_neq_cb_sym, bf_is_zero_cb_sym, bf_is_one_cb_sym, bf_has_clashing_subformulas_cb_sym, wff_has_clashing_subformulas_cb_sym, bf_has_subformula_cb_sym, wff_has_subformula_cb_sym, wff_remove_existential_cb_sym, input,
			inputs, _Rinputs_21, _Rinputs_22, main, rule, rules, _Rrules_23, _Rrules_24, rec_relation, rec_relations,
			_Rrec_relations_25, _Rrec_relations_26, formula, library, builder, builder_head, builder_body, _Rbuilder_head_27, _Rbuilder_head_28, start,
   };
	size_t id(const std::basic_string<char>& name) { return nts.get(name); }
private:
	std::vector<char> ts{
		'\0', '\n', '\r', '#', '\\', 'x', 'u', '\'', '"',
		'`', 'a', 'l', 'n', 'm', 'p', 'h', 'b', 'k', 'c',
		't', 'r', 'd', 'i', 'g', 'e', 'o', 'f', 'w', 's',
		':', '=', '.', '(', ')', '[', ']', '{', '}', '-',
		'<', ',', '$', '?', '_', '&', '|', '^', '!', '>',
		'T', 'F', '+', '~', '1', '0', 'q', 'z', 'v',
	};
	idni::nonterminals<char, char> nts{};
	idni::char_class_fns<char> cc;
	idni::grammar<char, char> g;
	idni::parser<char, char> p;
	idni::prods<char, char> t(size_t tid) {
		return idni::prods<char, char>(ts[tid]);
	}
	idni::prods<char, char> nt(size_t ntid) {
		return idni::prods<char, char>(idni::lit<char, char>(ntid, &nts));
	}
	idni::nonterminals<char, char> load_nonterminals() const {
		idni::nonterminals<char, char> nts{};
		for (const auto& nt : {
			"", "eof", "space", "digit", "xdigit", "alpha", "alnum", "punct", "printable", "eol",
			"ws_comment", "_Rws_comment_0", "ws_required", "ws", "hex_escape", "unicode_escape", "char_escape_encode", "esc", "q_char", "q_str",
			"q_bqstr", "char_punct", "_Rchar_punct_1", "_Rchar_punct_2", "_Rchar_punct_3", "char0", "char_", "string_char", "bqstring_char", "chars",
			"_Rchars_4", "_Rchars_5", "char_class", "digits", "_Rdigits_6", "_Rdigits_7", "definition", "dot", "open_parenthesis", "close_parenthesis",
			"open_bracket", "close_bracket", "open_brace", "close_brace", "minus", "colon", "less", "comma", "sym", "offsets",
			"step", "offset", "_Roffsets_8", "_Roffsets_9", "num", "capture", "shift", "variable", "var", "timed",
			"in", "out", "_Rtimed_10", "wff_rule", "wff_matcher", "wff_body", "wff_rec_relation", "wff_ref", "wff", "bf_eq_cb",
			"bf_neq_cb", "wff_has_clashing_subformulas_cb", "wff_has_subformula_cb", "wff_remove_existential", "wff_and", "wff_neg", "wff_xor", "wff_conditional", "wff_or", "wff_all",
			"wff_ex", "wff_imply", "wff_equiv", "wff_t", "wff_f", "bf_eq", "bf_neq", "bf_less", "bf_less_equal", "bf_greater",
			"wff_ref_args", "_Rwff_ref_args_11", "_Rwff_ref_args_12", "wff_and_sym", "wff_or_sym", "wff_xor_sym", "wff_conditional_sym", "wff_neg_sym", "wff_imply_sym", "wff_equiv_sym",
			"wff_all_sym", "_Rwff_all_13", "wff_ex_sym", "_Rwff_ex_14", "bf", "bf_equality_sym", "bf_nequality_sym", "bf_less_sym", "bf_less_equal_sym", "bf_greater_sym",
			"bf_rule", "bf_matcher", "bf_body", "bf_rec_relation", "bf_ref", "bf_is_zero_cb", "bf_is_one_cb", "bf_has_clashing_subformulas_cb", "bf_has_subformula_cb", "bf_constant",
			"bf_and", "bf_neg", "bf_xor", "bf_or", "bf_all", "bf_ex", "bf_subs_cb", "bf_t", "bf_f", "bf_ref_args",
			"_Rbf_ref_args_15", "_Rbf_ref_args_16", "bf_and_sym", "bf_or_sym", "bf_xor_sym", "bf_neg_sym", "bf_all_sym", "_Rbf_all_17", "bf_ex_sym", "_Rbf_ex_18",
			"constant", "binding", "bf_and_cb", "bf_or_cb", "bf_xor_cb", "bf_neg_cb", "source_binding", "named_binding", "type", "source",
			"source0", "_Rsource_19", "_Rsource_20", "bf_cb_arg", "bf_and_cb_sym", "bf_or_cb_sym", "bf_xor_cb_sym", "bf_neg_cb_sym", "bf_subs_cb_sym", "bf_eq_cb_sym",
			"wff_cb_arg", "bf_neq_cb_sym", "bf_is_zero_cb_sym", "bf_is_one_cb_sym", "bf_has_clashing_subformulas_cb_sym", "wff_has_clashing_subformulas_cb_sym", "bf_has_subformula_cb_sym", "wff_has_subformula_cb_sym", "wff_remove_existential_cb_sym", "input",
			"inputs", "_Rinputs_21", "_Rinputs_22", "main", "rule", "rules", "_Rrules_23", "_Rrules_24", "rec_relation", "rec_relations",
			"_Rrec_relations_25", "_Rrec_relations_26", "formula", "library", "builder", "builder_head", "builder_body", "_Rbuilder_head_27", "_Rbuilder_head_28", "start",
		}) nts.get(nt);
		return nts;
	}
	idni::char_class_fns<char> load_cc() {
		return idni::predefined_char_classes<char, char>({
			"eof",
			"space",
			"digit",
			"xdigit",
			"alpha",
			"alnum",
			"punct",
			"printable",
		}, nts);
	}
	idni::parser<char, char>::options load_opts() {
		idni::parser<char, char>::options o;
		return o;
	}
	idni::prods<char, char> load_prods() {
		idni::prods<char, char> q, nul(idni::lit<char, char>{});
		q(nt(9), (nt(1)));
		q(nt(9), (t(1)));
		q(nt(9), (t(2)));
		q(nt(11), (nt(8)));
		q(nt(11), (nt(8)+nt(11)));
		q(nt(10), (t(3)+nt(9)));
		q(nt(10), (t(3)+nt(11)+nt(9)));
		q(nt(12), (nt(2)+nt(13)));
		q(nt(12), (nt(10)+nt(13)));
		q(nt(13), (nt(12)));
		q(nt(13), (nul));
		q(nt(14), (t(4)+t(4)+t(5)+nt(4)+nt(4)));
		q(nt(15), (t(4)+t(4)+t(6)+nt(4)+nt(4)+nt(4)+nt(4)));
		q(nt(16), (nt(14)));
		q(nt(16), (nt(15)));
		q(nt(17), (t(4)+t(4)+t(4)+t(4)));
		q(nt(18), (t(7)));
		q(nt(19), (t(8)));
		q(nt(20), (t(9)));
		q(nt(22), (nt(17)+nt(18)));
		q(nt(23), (nt(17)+nt(19)));
		q(nt(24), (nt(17)+nt(20)));
		q(nt(21), (nt(7)) & ~(nt(18)) & ~(nt(19)) & ~(nt(20)) & ~(nt(22)) & ~(nt(23)) & ~(nt(24)));
		q(nt(25), (nt(2)));
		q(nt(25), (nt(6)));
		q(nt(25), (nt(16)));
		q(nt(25), (nt(21)));
		q(nt(26), (nt(17)+nt(18)));
		q(nt(26), (nt(19)));
		q(nt(26), (nt(20)));
		q(nt(26), (nt(25)));
		q(nt(27), (nt(17)+nt(19)));
		q(nt(27), (nt(18)));
		q(nt(27), (nt(20)));
		q(nt(27), (nt(25)));
		q(nt(28), (nt(17)+nt(20)));
		q(nt(28), (nt(18)));
		q(nt(28), (nt(19)));
		q(nt(28), (nt(25)));
		q(nt(30), (nt(6)));
		q(nt(31), (nt(30)+nt(31)));
		q(nt(31), (nul));
		q(nt(29), (nt(5)+nt(31)));
		q(nt(32), (t(10)+t(11)+t(12)+t(6)+t(13)));
		q(nt(32), (t(10)+t(11)+t(14)+t(15)+t(10)));
		q(nt(32), (t(16)+t(11)+t(10)+t(12)+t(17)));
		q(nt(32), (t(18)+t(12)+t(19)+t(20)+t(11)));
		q(nt(32), (t(21)+t(22)+t(23)+t(22)+t(19)));
		q(nt(32), (t(24)+t(25)+t(26)));
		q(nt(32), (t(23)+t(20)+t(10)+t(14)+t(15)));
		q(nt(32), (t(11)+t(25)+t(27)+t(24)+t(20)));
		q(nt(32), (t(14)+t(20)+t(22)+t(12)+t(19)+t(10)+t(16)+t(11)+t(24)));
		q(nt(32), (t(14)+t(6)+t(12)+t(18)+t(19)));
		q(nt(32), (t(28)+t(14)+t(10)+t(18)+t(24)));
		q(nt(32), (t(6)+t(14)+t(14)+t(24)+t(20)));
		q(nt(32), (t(5)+t(21)+t(22)+t(23)+t(22)+t(19)));
		q(nt(34), (nt(3)));
		q(nt(35), (nt(34)+nt(35)));
		q(nt(35), (nul));
		q(nt(33), (nt(3)+nt(35)));
		q(nt(36), (nt(13)+t(29)+t(30)+nt(13)));
		q(nt(37), (nt(13)+t(31)+nt(13)));
		q(nt(38), (nt(13)+t(32)+nt(13)));
		q(nt(39), (nt(13)+t(33)+nt(13)));
		q(nt(40), (nt(13)+t(34)+nt(13)));
		q(nt(41), (nt(13)+t(35)+nt(13)));
		q(nt(42), (nt(13)+t(36)+nt(13)));
		q(nt(43), (nt(13)+t(37)+nt(13)));
		q(nt(44), (nt(13)+t(38)+nt(13)));
		q(nt(45), (nt(13)+t(29)+nt(13)));
		q(nt(46), (nt(13)+t(39)+nt(13)));
		q(nt(47), (nt(13)+t(40)+nt(13)));
		q(nt(48), (nt(29)));
		q(nt(52), (nt(47)+nt(51)));
		q(nt(53), (nt(52)+nt(53)));
		q(nt(53), (nul));
		q(nt(49), (nt(40)+nt(50)+nt(53)+nt(41)));
		q(nt(51), (nt(54)));
		q(nt(51), (nt(55)));
		q(nt(51), (nt(56)));
		q(nt(50), (nt(54)));
		q(nt(50), (nt(55)));
		q(nt(50), (nt(56)));
		q(nt(56), (nt(55)+nt(44)+nt(54)));
		q(nt(54), (nt(13)+nt(33)+nt(13)));
		q(nt(57), (nt(58)));
		q(nt(57), (nt(59)));
		q(nt(62), (nt(60)));
		q(nt(62), (nt(61)));
		q(nt(59), (nt(62)+nt(49)));
		q(nt(55), (t(41)+nt(29)));
		q(nt(58), (nt(29)));
		q(nt(60), (t(42)+t(22)+t(43)+nt(29)));
		q(nt(61), (t(42)+t(25)+t(43)+nt(29)));
		q(nt(63), (nt(64)+nt(36)+nt(65)+nt(37)));
		q(nt(66), (nt(67)+nt(36)+nt(68)+nt(37)));
		q(nt(64), (nt(67)));
		q(nt(64), (nt(68)));
		q(nt(65), (nt(68)));
		q(nt(65), (nt(69)));
		q(nt(65), (nt(70)));
		q(nt(65), (nt(71)));
		q(nt(65), (nt(72)));
		q(nt(65), (nt(73)));
		q(nt(68), (nt(55)));
		q(nt(68), (nt(67)));
		q(nt(68), (nt(74)));
		q(nt(68), (nt(75)));
		q(nt(68), (nt(76)));
		q(nt(68), (nt(77)));
		q(nt(68), (nt(78)));
		q(nt(68), (nt(79)));
		q(nt(68), (nt(80)));
		q(nt(68), (nt(81)));
		q(nt(68), (nt(82)));
		q(nt(68), (nt(83)));
		q(nt(68), (nt(84)));
		q(nt(68), (nt(85)));
		q(nt(68), (nt(86)));
		q(nt(68), (nt(87)));
		q(nt(68), (nt(88)));
		q(nt(68), (nt(89)));
		q(nt(67), (nt(48)+nt(49)+nt(90)));
		q(nt(91), (nt(57)));
		q(nt(92), (nt(91)+nt(92)));
		q(nt(92), (nul));
		q(nt(90), (nt(38)+nt(92)+nt(39)));
		q(nt(74), (nt(38)+nt(68)+nt(93)+nt(68)+nt(39)));
		q(nt(78), (nt(38)+nt(68)+nt(94)+nt(68)+nt(39)));
		q(nt(76), (nt(38)+nt(68)+nt(95)+nt(68)+nt(39)));
		q(nt(77), (nt(38)+nt(68)+nt(96)+nt(68)+nt(45)+nt(68)+nt(39)));
		q(nt(75), (nt(97)+nt(68)));
		q(nt(81), (nt(38)+nt(68)+nt(98)+nt(68)+nt(39)));
		q(nt(82), (nt(38)+nt(68)+nt(99)+nt(68)+nt(39)));
		q(nt(101), (nt(55)));
		q(nt(101), (nt(57)));
		q(nt(79), (nt(100)+nt(101)+nt(12)+nt(68)));
		q(nt(103), (nt(55)));
		q(nt(103), (nt(57)));
		q(nt(80), (nt(102)+nt(12)+nt(103)+nt(12)+nt(68)));
		q(nt(85), (nt(38)+nt(104)+nt(105)+nt(104)+nt(39)));
		q(nt(86), (nt(38)+nt(104)+nt(106)+nt(104)+nt(39)));
		q(nt(87), (nt(38)+nt(104)+nt(107)+nt(104)+nt(39)));
		q(nt(88), (nt(38)+nt(104)+nt(108)+nt(104)+nt(39)));
		q(nt(89), (nt(38)+nt(104)+nt(109)+nt(104)+nt(39)));
		q(nt(93), (nt(13)+t(44)+t(44)+nt(13)));
		q(nt(94), (nt(13)+t(45)+t(45)+nt(13)));
		q(nt(95), (nt(13)+t(46)+nt(13)));
		q(nt(96), (nt(13)+t(42)+nt(13)));
		q(nt(97), (nt(13)+t(47)+nt(13)));
		q(nt(98), (nt(13)+t(38)+t(48)+nt(13)));
		q(nt(99), (nt(13)+t(39)+t(38)+t(48)+nt(13)));
		q(nt(100), (nt(13)+t(10)+t(11)+t(11)+nt(13)));
		q(nt(102), (nt(13)+t(24)+t(5)+nt(13)));
		q(nt(83), (nt(13)+t(49)+nt(13)));
		q(nt(84), (nt(13)+t(50)+nt(13)));
		q(nt(110), (nt(111)+nt(36)+nt(112)+nt(37)));
		q(nt(113), (nt(114)+nt(36)+nt(104)+nt(37)));
		q(nt(111), (nt(104)));
		q(nt(112), (nt(104)));
		q(nt(112), (nt(115)));
		q(nt(112), (nt(116)));
		q(nt(112), (nt(117)));
		q(nt(112), (nt(118)));
		q(nt(104), (nt(55)));
		q(nt(104), (nt(57)));
		q(nt(104), (nt(114)));
		q(nt(104), (nt(119)));
		q(nt(104), (nt(120)));
		q(nt(104), (nt(121)));
		q(nt(104), (nt(122)));
		q(nt(104), (nt(123)));
		q(nt(104), (nt(124)));
		q(nt(104), (nt(125)));
		q(nt(104), (nt(126)));
		q(nt(104), (nt(127)));
		q(nt(104), (nt(128)));
		q(nt(114), (nt(48)+nt(49)+nt(129)));
		q(nt(130), (nt(57)));
		q(nt(131), (nt(130)+nt(131)));
		q(nt(131), (nul));
		q(nt(129), (nt(38)+nt(131)+nt(39)));
		q(nt(120), (nt(38)+nt(104)+nt(132)+nt(104)+nt(39)));
		q(nt(123), (nt(38)+nt(104)+nt(133)+nt(104)+nt(39)));
		q(nt(122), (nt(38)+nt(104)+nt(134)+nt(13)+nt(104)+nt(39)));
		q(nt(121), (nt(135)+nt(104)));
		q(nt(137), (nt(55)));
		q(nt(137), (nt(57)));
		q(nt(124), (nt(136)+nt(12)+nt(137)+nt(12)+nt(104)));
		q(nt(139), (nt(55)));
		q(nt(139), (nt(57)));
		q(nt(125), (nt(138)+nt(12)+nt(139)+nt(12)+nt(104)));
		q(nt(132), (nt(13)+t(44)+nt(13)));
		q(nt(133), (nt(13)+t(45)+nt(13)));
		q(nt(134), (nt(13)+t(51)+nt(13)));
		q(nt(135), (nt(13)+t(52)+nt(13)));
		q(nt(105), (nt(13)+t(30)+nt(13)));
		q(nt(106), (nt(13)+t(47)+t(30)+nt(13)));
		q(nt(107), (nt(13)+t(39)+nt(13)));
		q(nt(108), (nt(13)+t(39)+t(30)+nt(13)));
		q(nt(109), (nt(13)+t(48)+nt(13)));
		q(nt(136), (nt(13)+t(26)+t(10)+t(11)+t(11)+nt(13)));
		q(nt(138), (nt(13)+t(26)+t(24)+t(5)+nt(13)));
		q(nt(127), (nt(13)+t(53)+nt(13)));
		q(nt(128), (nt(13)+t(54)+nt(13)));
		q(nt(119), (nt(42)+nt(140)+nt(43)));
		q(nt(140), (nt(55)));
		q(nt(140), (nt(141)));
		q(nt(140), (nt(142)));
		q(nt(140), (nt(143)));
		q(nt(140), (nt(144)));
		q(nt(140), (nt(145)));
		q(nt(141), (nt(146)));
		q(nt(141), (nt(147)));
		q(nt(147), (nt(29)));
		q(nt(146), (nt(148)+nt(45)+nt(149)));
		q(nt(148), (nt(29)));
		q(nt(148), (nul));
		q(nt(150), (nt(2)));
		q(nt(150), (nt(6)));
		q(nt(150), (nt(16)));
		q(nt(150), (nt(21)));
		q(nt(151), (nt(150)));
		q(nt(152), (nt(151)));
		q(nt(152), (nt(151)+nt(152)));
		q(nt(149), (nt(152)));
		q(nt(142), (nt(153)+nt(154)+nt(153)));
		q(nt(143), (nt(153)+nt(155)+nt(153)));
		q(nt(144), (nt(153)+nt(156)+nt(153)));
		q(nt(145), (nt(157)+nt(153)));
		q(nt(126), (nt(158)+nt(153)+nt(12)+nt(153)+nt(12)+nt(153)));
		q(nt(69), (nt(159)+nt(153)+nt(12)+nt(160)+nt(12)+nt(160)));
		q(nt(70), (nt(161)+nt(153)+nt(12)+nt(160)+nt(12)+nt(160)));
		q(nt(115), (nt(162)+nt(153)+nt(12)+nt(153)));
		q(nt(116), (nt(163)+nt(153)+nt(12)+nt(153)));
		q(nt(117), (nt(164)+nt(153)+nt(12)+nt(153)));
		q(nt(71), (nt(165)+nt(160)+nt(12)+nt(160)));
		q(nt(118), (nt(166)+nt(153)+nt(12)+nt(153)+nt(12)+nt(153)));
		q(nt(72), (nt(167)+nt(160)+nt(12)+nt(160)+nt(12)+nt(160)));
		q(nt(73), (nt(168)+nt(160)+nt(12)+nt(160)));
		q(nt(153), (nt(55)));
		q(nt(153), (nt(104)));
		q(nt(160), (nt(55)));
		q(nt(160), (nt(68)));
		q(nt(154), (nt(13)+t(16)+t(26)+t(43)+t(10)+t(12)+t(21)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(155), (nt(13)+t(16)+t(26)+t(43)+t(25)+t(20)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(156), (nt(13)+t(16)+t(26)+t(43)+t(5)+t(25)+t(20)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(157), (nt(13)+t(16)+t(26)+t(43)+t(12)+t(24)+t(23)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(158), (nt(13)+t(16)+t(26)+t(43)+t(28)+t(6)+t(16)+t(28)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(159), (nt(13)+t(16)+t(26)+t(43)+t(24)+t(55)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(161), (nt(13)+t(16)+t(26)+t(43)+t(12)+t(24)+t(55)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(162), (nt(13)+t(16)+t(26)+t(43)+t(22)+t(28)+t(43)+t(56)+t(24)+t(20)+t(25)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(163), (nt(13)+t(16)+t(26)+t(43)+t(22)+t(28)+t(43)+t(25)+t(12)+t(24)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(164), (nt(13)+t(16)+t(26)+t(43)+t(15)+t(10)+t(28)+t(43)+t(18)+t(11)+t(10)+t(28)+t(15)+t(22)+t(12)+t(23)+t(43)+t(28)+t(6)+t(16)+t(26)+t(25)+t(20)+t(13)+t(6)+t(11)+t(10)+t(28)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(166), (nt(13)+t(16)+t(26)+t(43)+t(15)+t(10)+t(28)+t(43)+t(28)+t(6)+t(16)+t(26)+t(25)+t(20)+t(13)+t(6)+t(11)+t(10)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(165), (nt(13)+t(27)+t(26)+t(26)+t(43)+t(15)+t(10)+t(28)+t(43)+t(18)+t(11)+t(10)+t(28)+t(15)+t(22)+t(12)+t(23)+t(43)+t(28)+t(6)+t(16)+t(26)+t(25)+t(20)+t(13)+t(6)+t(11)+t(10)+t(28)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(167), (nt(13)+t(27)+t(26)+t(26)+t(43)+t(15)+t(10)+t(28)+t(43)+t(28)+t(6)+t(16)+t(26)+t(25)+t(20)+t(13)+t(6)+t(11)+t(10)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(168), (nt(13)+t(27)+t(26)+t(26)+t(43)+t(20)+t(24)+t(13)+t(25)+t(57)+t(24)+t(43)+t(24)+t(5)+t(22)+t(28)+t(19)+t(24)+t(12)+t(19)+t(22)+t(10)+t(11)+t(43)+t(18)+t(16)+nt(13)));
		q(nt(169), (nt(60)+nt(45)+nt(42)+nt(146)+nt(43)));
		q(nt(171), (nt(169)));
		q(nt(172), (nt(171)+nt(172)));
		q(nt(172), (nul));
		q(nt(170), (nt(46)+nt(169)+nt(172)+nt(37)));
		q(nt(173), (nt(68)+nt(37)));
		q(nt(174), (nt(63)));
		q(nt(174), (nt(110)));
		q(nt(176), (nt(174)));
		q(nt(177), (nt(176)+nt(177)));
		q(nt(177), (nul));
		q(nt(175), (nt(177)));
		q(nt(178), (nt(66)+nt(37)));
		q(nt(178), (nt(113)));
		q(nt(180), (nt(178)));
		q(nt(181), (nt(180)+nt(181)));
		q(nt(181), (nul));
		q(nt(179), (nt(181)));
		q(nt(182), (nt(179)+nt(173)));
		q(nt(183), (nt(175)));
		q(nt(184), (nt(185)+nt(36)+nt(186)+nt(37)));
		q(nt(187), (nt(12)+nt(55)));
		q(nt(188), (nt(187)+nt(188)));
		q(nt(188), (nul));
		q(nt(185), (nt(38)+nt(55)+nt(188)+nt(39)));
		q(nt(186), (nt(68)));
		q(nt(186), (nt(104)));
		q(nt(189), (nt(170)));
		q(nt(189), (nt(182)));
		q(nt(189), (nt(183)));
		q(nt(189), (nt(184)));
		return q;
	}
};
#endif // __TAU_PARSER_H__
