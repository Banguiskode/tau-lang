# LICENSE
# This software is free for use and redistribution while including this
# license notice, unless:
# 1. is used for commercial or non-personal purposes, or
# 2. used for a product which includes or associated with a blockchain or other
# decentralized database technology, or
# 3. used for a product which includes or associated with the issuance or use
# of cryptographic or electronic currencies/coins/tokens.
# On all of the mentiTd cases, an explicit and written permission is required
# from the Author (Ohad Asor).
# Contact ohad@idni.org for requesting a permission. This license may be
# modified over time by the Author.

@use_char_class eof, space, digit, xdigit, alpha, alnum, punct, printable.

#
# as a rule of thumb, to ease navigation of the corresponding tree, the
# non-terminals shouldn't appear in * or + expressions. Otherwise,
# intermediate non terminals would be created and break the expected tree
# structure
#

# TODO (HIGH) allow comments in the programs, formulas, ...

# whitespace and comments
comment                => '#' (printable | '\t')* ('\n' | '\r' | eof).
__                     => (space | comment) _.   # whitespace
_                      => [ __ ].                # optional whitespace

# common symbols
bf_def                 => ":=". # for rewriting rules and bf rec. relations bf_def and rules
wff_def                => "::=". # for wff rec. relations bf_def and rules
tau_def                => ":::=". # for tau rules
dot                    => '.'.
open_parenthesis       => '('.
close_parenthesis      => ')'.
open_bracket           => '['.
close_bracket          => ']'.
open_brace             => '{'.
close_brace            => '}'.
minus                  => '-'.
colon                  => ':'.
semicolon              => ';'.
less                   => '<'.
comma                  => ','.
apostrophe             => "'".
quote                  => '"'.

# common elements
chars                  => alpha (alnum)*.
digits                 => digit+.
sym                    => chars.

# offsets
# TODO (HIGH) check programatically that no shift is use in a rec_relation defs
offsets                => open_bracket _ offset (_ comma _ offset)* _ close_bracket.
offset                 => num | capture | shift | (variable & ~io_var).
shift                  => (capture | (variable & ~io_var)) _ minus _ num.
num                    => digits.

# IDEA maybe use quantified_variable => (variable | capture) in quantifiers
# to cimplify the code.
variable               => var | io_var.
io_var                 => in | out.
in                     => in_var_name open_bracket offset close_bracket.
out                    => out_var_name open_bracket offset close_bracket.
bool_variable          => '?' chars.
capture                => capture_var.
capture_var            => '$' chars.
var                    => chars.
in_var_name            => "i_" chars.
out_var_name           => "o_" chars.

# tau
tau_rule               => tau_matcher _ tau_def _ tau_body _ dot.
tau_matcher            => tau.
tau_body               => tau | tau_collapse_positives_cb | tau_positives_upwards_cb.
tau_rec_relation       => (tau & ~tau_and & ~tau_neg & ~tau_or & ~tau_wff & ~capture)
                          _ tau_def _ tau _ dot.
tau_ref                => sym _ offsets _ tau_ref_args.
tau_ref_args           => open_parenthesis (_ (variable | capture))* _ close_parenthesis.


tau                    => tau_wff | tau_ref | tau_and | tau_or | tau_neg | capture.
tau_and                => open_parenthesis _ tau _ tau_and_sym _ tau _ close_parenthesis.
tau_or                 => open_parenthesis _ tau _ tau_or_sym  _ tau _ close_parenthesis.
tau_neg                => tau_neg_sym _ tau.
# TODO (HIGH) simply consider wff without { and }
# we introduce '{' and '}' to avoid confusion with wff negation
# see the next TODO for an alternative
tau_wff                => open_brace _ wff _ close_brace.

# tau_op_sym
tau_and_sym            => "&&&".
tau_or_sym             => "|||".
# TODO (HIGH) replace by - or other symbol to avoid confusion with wff negation
tau_neg_sym            => "!!!".

# wff
wff_rule               => wff_matcher _ wff_def _ wff_body _ dot.
wff_matcher            => wff.
wff_body               => wff | bf_eq_cb | bf_neq_cb | wff_has_clashing_subformulas_cb
                        | wff_has_subformula_cb | wff_remove_existential_cb
                        | wff_remove_bexistential_cb | wff_remove_buniversal_cb.
wff_rec_relation       => (wff & ~wff_and & ~wff_neg & ~wff_xor & ~wff_conditional &
                          ~wff_or & ~wff_all & ~wff_ex & ~wff_imply & ~wff_equiv &
			  ~wff_t & ~wff_f & ~capture & ~bool_variable & ~wff_ball &
			  ~wff_bex & ~bf_eq & ~ bf_neq & ~bf_less & ~bf_less_equal &
			  ~bf_greater & ~bf_segment & ~bf_not_less_equal)
                          _ wff_def _ wff _ dot.

wff                    => wff_ref | wff_and | wff_neg | wff_xor | wff_conditional
                        | wff_or | wff_all | wff_ex | wff_imply | wff_equiv
                        | wff_t | wff_f | capture | bool_variable | wff_ball | wff_bex
                        | bf_eq | bf_neq | bf_less | bf_less_equal | bf_not_less_equal
                        | bf_greater | bf_segment.
wff_ref                => sym _ offsets _ wff_ref_args.
wff_ref_args           => open_parenthesis (_ (variable | capture))* _ close_parenthesis.
wff_and                => open_parenthesis _ wff _ wff_and_sym _ wff _ close_parenthesis.
wff_or                 => open_parenthesis _ wff _ wff_or_sym  _ wff _ close_parenthesis.
wff_xor                => open_parenthesis _ wff _ wff_xor_sym _ wff _ close_parenthesis.
wff_conditional        => open_parenthesis _ wff _ wff_conditional_sym _ wff _ colon _ wff _ close_parenthesis.
wff_neg                => wff_neg_sym _ wff.
wff_imply              => open_parenthesis _ wff _ wff_imply_sym _ wff _ close_parenthesis.
wff_equiv              => open_parenthesis _ wff _ wff_equiv_sym _ wff _ close_parenthesis.
wff_all                => wff_all_sym  __ (variable | capture)      __ wff.
wff_ex                 => wff_ex_sym   __ (variable | capture)      __ wff.
wff_ball               => wff_ball_sym __ (bool_variable | capture) __ wff.
wff_bex                => wff_bex_sym  __ (bool_variable | capture) __ wff.

# relational operators
#
# they are named bf_* as they involve boolean functions,
# but they are not boolean functions themselves, they return a T/F wff value
# and hence, should be considered as wffs
bf_eq                  => open_parenthesis _ bf _ bf_equality_sym       _ bf _ close_parenthesis.
bf_neq                 => open_parenthesis _ bf _ bf_nequality_sym      _ bf _ close_parenthesis.
bf_less                => open_parenthesis _ bf _ bf_less_sym           _ bf _ close_parenthesis.
bf_less_equal          => open_parenthesis _ bf _ bf_less_equal_sym     _ bf _ close_parenthesis.
bf_not_less_equal      => open_parenthesis _ bf _ bf_not_less_equal_sym _ bf _ close_parenthesis.
bf_greater             => open_parenthesis _ bf _ bf_greater_sym        _ bf _ close_parenthesis.
bf_segment             => open_parenthesis _ bf _ bf_less_equal_sym     _ bf _ bf_less_equal_sym _ bf _ close_parenthesis.

# wff_op_sym
wff_and_sym            => "&&".
wff_or_sym             => "||".
wff_xor_sym            => '^'.
wff_conditional_sym    => '?'.
wff_neg_sym            => '!'.
wff_imply_sym          => "->".
wff_equiv_sym          => "<->".
wff_all_sym            => "all".
wff_ex_sym             => "ex".
wff_ball_sym           => "ball".
wff_bex_sym            => "bex".
wff_t                  => 'T'.
wff_f                  => 'F'.

# bf
bf_rule                => bf_matcher _ bf_def _ bf_body _ dot.
bf_matcher             => bf.
bf_body                => bf | bf_is_zero_cb | bf_is_one_cb | bf_has_clashing_subformulas_cb
                        | bf_has_subformula_cb | bf_remove_funiversal_cb | bf_remove_fexistential_cb
                        | bf_and_cb | bf_or_cb | bf_xor_cb | bf_neg_cb.
bf                     => bf_ref | bf_constant | bf_and | bf_neg | bf_xor | bf_or
                        | bf_all | bf_ex | bf_t | bf_f | variable | capture | bf_splitter.
bf_rec_relation        => (bf & ~bf_and & ~bf_neg & ~bf_xor & ~bf_or & ~bf_all & ~bf_ex &
                          ~bf_t & ~bf_f & ~capture & ~bf_constant & ~bf_eq & ~bf_neq & ~variable & ~bf_splitter)
                          _ bf_def _ bf _ dot.
bf_ref                 => sym offsets bf_ref_args.
bf_ref_args            => open_parenthesis (_ (variable | capture))* _ close_parenthesis.
bf_and                 => open_parenthesis  _ bf _ bf_and_sym _ bf _ close_parenthesis.
bf_or                  => open_parenthesis  _ bf _ bf_or_sym  _ bf _ close_parenthesis.
bf_xor                 => open_parenthesis  _ bf _ bf_xor_sym _ bf _ close_parenthesis.
bf_neg                 => bf_neg_sym _ bf.
bf_all                 => bf_all_sym __ (variable | capture) __ bf.
bf_ex                  => bf_ex_sym  __ (variable | capture) __ bf.
bf_splitter            => bf_splitter_sym _ open_parenthesis _ bf _ close_parenthesis.

# bf_op_sym
bf_and_sym             => '&'.
bf_or_sym              => '|'.
bf_xor_sym             => '+'.
bf_neg_sym             => '~'.
bf_equality_sym        => "=".
bf_nequality_sym       => "!=".
bf_less_sym            => '<'.
bf_less_equal_sym      => "<=".
bf_not_less_equal_sym  => "!<=".
bf_greater_sym         => '>'.
bf_all_sym             => "fall".
bf_ex_sym              => "fex".
bf_splitter_sym        => "S".
bf_t                   => '1'.
bf_f                   => '0'.

# constant
bf_constant            => open_brace _ constant _ close_brace.

#constants
constant               => binding | capture.
binding                => source_binding | named_binding.
named_binding          => chars.
source_binding         => type _ colon _ source.
type                   => chars | null.

# source related bf_def
source0                => alnum | space | punct.
source                 => (source0)+.

# callbacks

# callbacks must be used in the following cases:
#
# 1.- underlying boolean algebras operations: and, or, xor, neg, less,
# less_equal, greater, subs, eq, neq, is_zero, is_one,... In this case, no
# other way we have to call the uderlying operations of the boolean algebra
# 2.- speed up computations: has_clashing_subformulas, has_subformula,
# remove_existential... In this case, we could use the the callback to
# avoid the creation of intermediate formulas. For instance, if we want
# to check if a formula has a subformula, we could use the callback to
# avoid the creation of the subformulas to check that point.
# 3.- to create new subformulas in other rules, for instance, to create a
# new formula that is the substitution of a variable by a constant.

# TODO (HIGH) earley parser doesn't support tabs in comments
#
# This should be move to a TODO in the parsers...

bf_and_cb              => bf_and_cb_sym     __ bf_cb_arg __ bf_cb_arg.
bf_or_cb               => bf_or_cb_sym      __ bf_cb_arg __ bf_cb_arg.
bf_xor_cb              => bf_xor_cb_sym     __ bf_cb_arg __ bf_cb_arg.
bf_neg_cb              => bf_neg_cb_sym     __ bf_cb_arg.
bf_eq_cb               => bf_eq_cb_sym      __ bf_cb_arg __ wff_cb_arg __ wff_cb_arg.
bf_neq_cb              => bf_neq_cb_sym     __ bf_cb_arg __ wff_cb_arg __ wff_cb_arg.
bf_is_zero_cb          => bf_is_zero_cb_sym __ bf_cb_arg __ bf_cb_arg.
bf_is_one_cb           => bf_is_one_cb_sym  __ bf_cb_arg __ bf_cb_arg.

bf_remove_funiversal_cb     => bf_remove_funiversal_cb_sym    __ bf_cb_arg  __ bf_cb_arg  __ bf_cb_arg  __ bf_cb_arg.
bf_remove_fexistential_cb   => bf_remove_fexistential_cb_sym  __ bf_cb_arg  __ bf_cb_arg  __ bf_cb_arg  __ bf_cb_arg.
wff_remove_existential_cb   => wff_remove_existential_cb_sym  __ wff_cb_arg __ wff_cb_arg.
wff_remove_bexistential_cb  => wff_remove_bexistential_cb_sym __ wff_cb_arg __ wff_cb_arg __ wff_cb_arg __ wff_cb_arg.
wff_remove_buniversal_cb    => wff_remove_buniversal_cb_sym   __ wff_cb_arg __ wff_cb_arg __ wff_cb_arg __ wff_cb_arg.

# extra callbacks to speed up computations
bf_has_clashing_subformulas_cb  => bf_has_clashing_subformulas_cb_sym  __ bf_cb_arg  __ bf_cb_arg.
wff_has_clashing_subformulas_cb => wff_has_clashing_subformulas_cb_sym __ wff_cb_arg __ wff_cb_arg.
bf_has_subformula_cb            => bf_has_subformula_cb_sym            __ bf_cb_arg  __ bf_cb_arg  __ bf_cb_arg.
wff_has_subformula_cb           => wff_has_subformula_cb_sym           __ wff_cb_arg __ wff_cb_arg __ wff_cb_arg.

# callback symbols
bf_has_clashing_subformulas_cb_sym  => "bf_has_clashing_subformulas_cb".
bf_has_subformula_cb_sym            => "bf_has_subformula_cb".
wff_has_clashing_subformulas_cb_sym => "wff_has_clashing_subformulas_cb".
wff_has_subformula_cb_sym           => "wff_has_subformula_cb".
wff_remove_existential_cb_sym       => "wff_remove_existential_cb".
wff_remove_bexistential_cb_sym      => "wff_remove_bexistential_cb".
wff_remove_buniversal_cb_sym        => "wff_remove_buniversal_cb".
bf_remove_fexistential_cb_sym       => "bf_remove_fexistential_cb".
bf_remove_funiversal_cb_sym         => "bf_remove_funiversal_cb".

# bultin_args, type is neede to capture appropriate typed arguments, do not try to simplify this
bf_cb_arg              => bf.
wff_cb_arg             => wff.

# bf_cb_syms
bf_and_cb_sym          => "bf_and_cb".
bf_or_cb_sym           => "bf_or_cb".
bf_xor_cb_sym          => "bf_xor_cb".
bf_neg_cb_sym          => "bf_neg_cb".
bf_eq_cb_sym           => "bf_eq_cb".
bf_neq_cb_sym          => "bf_neq_cb".
bf_is_zero_cb_sym      => "bf_is_zero_cb".
bf_is_one_cb_sym       => "bf_is_one_cb".

# cb for tau
tau_collapse_positives_cb      => (tau_collapse_positives_cb_sym __ tau_cb_arg __ tau_cb_arg __ tau_cb_arg)
                                | (tau_collapse_positives_cb_sym __ tau_cb_arg __ tau_cb_arg).
tau_positives_upwards_cb       => tau_positives_upwards_cb_sym __ tau_cb_arg __ tau_cb_arg.
tau_cb_arg                     => capture | tau.
tau_collapse_positives_cb_sym  => "tau_collapse_positives_cb".
tau_positives_upwards_cb_sym   => "tau_positives_upwards_cb".

# input definition
inputs                 => _ less _ input (_ input)* _ dot.
input                  => in _ colon _ open_brace _ source_binding _ close_brace.
# each builder is define on its own string
# TODO explit builders by type: bf, wff, and tau
builder                => _ builder_head _ builder_body _ dot.
builder_head           => open_parenthesis _ capture (__ capture)* _ close_parenthesis.
builder_body           => bf_builder_body | wff_builder_body | tau_builder_body.
bf_builder_body        => bf_def _ bf.
wff_builder_body       => wff_def _ wff.
tau_builder_body       => tau_def _ tau.
# main posibilities
library                => rules.
rules                  => (_ rule)*.
rule                   => wff_rule | bf_rule | tau_rule.
nso_rr                 => nso_rec_relations nso_main.
nso_rec_relations      => (_ nso_rec_relation)*.
nso_rec_relation       => bf_rec_relation | wff_rec_relation.
nso_main               => _ wff _ dot.
gssotc_rr              => gssotc_rec_relations gssotc_main.
gssotc_rec_relations   => (_ gssotc_rec_relation)*.
gssotc_rec_relation    => tau_rec_relation | wff_rec_relation | bf_rec_relation.
gssotc_main            => _ tau _ semicolon.
start                  => (inputs | builder | library | nso_rr | gssotc_rr) _.

# cli related rules
# use cli as starting point for parsing
# TODO do the same with the other starting points: library, inputs, builder.
# IDEA in the future nso_rr could be seen also as a starting point and also gssotc_rr
# depending on the use case of the grammar.
cli                    => _ cli_command (_ dot _ cli_command)* (_ dot) _.
cli_command            => normalize | bf_substitute | wff_substitute
			| bf_instantiate | wff_instantiate | file | rr_nso | wff
			| (bf & ~help & ~version & ~quit)
			| help | version | quit.

normalize              => normalize_sym __ (q_nso_rr | q_wff | output | wff_selection).
# TODO (HIGH) add support for file paths
file                   => file_sym quote chars quote.
bf_instantiate         => instantiate_sym __
                          # variable to be instantiated
                          (q_var | bf_var_selection | output) __
                          # bf to be used for instantiation
                          (q_bf | bf_selection | output) __
                          # nso_rr or output or selection where to instantiate
                          (bf_selection | output).
wff_instantiate        => instantiate_sym __
                          # variable to be instantiated
                          (q_var | wff_var_selection | output) __
                          # wff to be used for instantiation
                          (q_wff | wff_selection | output) __
                          # nso_rr or output or selection where to instantiate
                          (wff_selection | output).
bf_substitute          => substitute_sym __
                          # wff or output or selection to be used for substitution
                          (q_bf | output | bf_selection) __
                          # wff or output or selection where to substitute
                          (output | wff_selection | bf_selection).
wff_substitute         => substitute_sym __
                          # bf or output or selection to be used for substitution
                          (q_wff | output | wff_selection) __
                          # bf or output or selection where to substitute
                          (output | wff_selection).
help                   => help_sym [ __ cli_cmd ].
version                => version_sym.
quit                   => quit_sym.

wff_selection          => selection_sym __ digits.
bf_selection           => selection_sym __ digits.
bf_var_selection       => selection_sym __ digits.
wff_var_selection      => selection_sym __ digits.

q_nso_rr               => apostrophe _ nso_rr _ apostrophe.
q_wff                  => apostrophe _ wff    _ apostrophe.
q_bf                   => apostrophe _ bf     _ apostrophe.
q_var                  => apostrophe _ var    _ apostrophe.
output                 => output_sym __ digits.

cli_cmd                => help_sym | version_sym | quit_sym | output_sym
                        | selection_sym | instantiate_sym | substitute_sym
                        | normalize_sym | file_sym.

# cli symbols
help_sym               => "h" | "help".
version_sym            => "v" | "version".
quit_sym               => "q" | "quit" | "exit".
output_sym             => "o" | "output".
selection_sym          => "s" | "selection".
instantiate_sym        => "i" | "instantiate".
substitute_sym         => "s" | "substitute".
normalize_sym          => "n" | "normalize".
file_sym               => "r" | "read".
