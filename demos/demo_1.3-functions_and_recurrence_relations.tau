# Apart from the Boolean functions and Tau formulas, you can define your own
# functions

f($X) := $X +1
g($X) := $X + f($X)

# and also recurrence relations

p[$n]($x,$y) :::= {ex z p[1]($x, $y) && p[$n-1]($y, $z)} 	# general case
p[1]($x,$y) :::= {$x' $y = o1[t]} 					# base case

# As with history, such definitions are stored in a array like structure. You can
# check them in a similar way:

defs %	# last stored definition
defs %-1 # previous definition
defs %1 # first stored definition

# and also print all stored definitions

defs

# In order to use them, you should just invoke them by their name.

h($Y) := 1 		# define a Boolean function
n all x h(x) != 0 	# normalize a formula involving the defined Boolean function

# This syntax would be improve in the future to simplify it: mainly using only
# ':=' regardless of the type of the definition. The '$' would also disappear to
# consider only the name of the variable.

quit # quit the Tau REPL
