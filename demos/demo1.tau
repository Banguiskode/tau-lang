#
# In the Tau REPL, you have memory at your disposal. There, you could store
# formulas on demand. Also, results from computations are stored by default.
#
# The memory works like an array; the first formula stored or result is at position 0.
# To access the elements of the memory, you could use a relative (from the end)
# or absolute (from the beginning) notation.
#
# All the results obtained in the REPL are automatically stored in the memory at the
# end unless it is equal to the last result.
#
# Let us store several function in the memory
#

mem (X | Y) & Z	# store a Boolean function in memory
mem (X | Y) | Z	# store a Boolean function in memory
mem (X & Y) & Z	# store a Boolean function in memory

#
# Let us access them using a relative or absolute notation
#

mem %0 # print the formula stored in memory, relative access
mem %1 # print the formula stored in memory, relative access
mem %-0 # print the formula stored in memory, absolute access
mem %-1	# print the formula stored in memory, absolute access

#
# We could also delete them, print and so on,...
#

mem	# print all stored formulas
mem del %-0	# delete the formula stored in memory, absolute access
mem # print all stored formulas
mem del %0 # delete the formula stored in memory, relative access
mem # print all stored formulas
mem clear # clear memory
mem # print all stored formulas (empty!)
#
#
# The above notation used to access the memory could also be used in the commands.
# For example, the following commands will compute the dnf of Boolean functions passed
# as an argument or as a memory position.
#
dnf (X | Y | W) & Z # compute the dnf of a Boolean function
mem (X | Y) & Z # store a Boolean function in memory
dnf %1 # convert to dnf the formula stored in memory, relative access
dnf %-1 # convert to dnf the formula stored in memory, absolute access
mem clear # clear memory
#
#
# The same happens when using formulas. The following command will convert formulas to cnf.
#
cnf (X = 0 && Y = 0 && W = 0) || Z = 0 # convert to cnf a formula given as argument
mem (X = 0 && Y = 0) || Z = 0 # store a formula in memory
cnf %1 # convert to cnf the formula stored in memory, relative access
cnf %-1	# convert to cnf the formula stored in memory, absolute access
mem clear # clear memory
#
#
# Apart from the memory, you can define your own functions, predicates, and tau rules.
# They are also stored in an array-like structure. The first definition is at position 0.
# To manipulate available definitions, you could use the same notation as the memory.
#
def g($Y) :::= {T} # define a tau rule
def g($Y) ::= T	# define a predicate
def g($Y) := 1 # define a function

#
# Again we could print them, delete them, and so on,...
#

def	# list all definitions
def del %-0 # delete a definition, absolute access
def # list all definitions
def del %0 # delete a definition, relative access
def # list all definitions
def clear # clear all definitions
def	# list all definitions

#
# In order to use them, you should just invoke them by their name.
#

def g($Y) := 1 # define a function
n all x g(x) != 0 # use the function in a formula
#
#
# The qelim command eliminate the inner quantifier from a formula.
#
set severity debug # let us show some details of the process
qelim all X (X = 0)	# eliminate one quantifier from a simple formula given as argument

#
# As usual we could also pass a formula stored in memory.
#

mem all X (X = 0) # store a simple formula in memory
qelim %1 # eliminate one quantifier from the formula stored in memory, relative access
qelim %-2 # eliminate one quantifier from the formula stored in memory, absolute access
mem clear # clear memory
set severity info # set the severity back to info
#
#
# The following example shows that the proposition
# "for all x there exists a y such that x is equal to y and
#  for all v there exists a w such that v is equal to w"
# is true in the theory of countable atomless Boolean algebra. This is because
# we assume non-typed variables to be of this type by default.
# In fact, our procedure can decide the validity for any formula
# in the first order theory of countable atomless Boolean algebra.
# The example uses the new quantifier elimination algorithm, which is shown again below, and the
# new Boolean function normalizer.
#
n all x ex y all v ex w x = y && v = w
#
#
# The new Boolean function normalization procedure can minimize redundant parts of a formula
#
n xyzvw | xyzv | xyz | xy | x
#
# It also gives canonical output, meaning two equivalent but syntactically different Boolean functions will be
# normalized to the same syntactical expression. The following is a simple example of this.
#
n xa + ya'
n a'y + ax
# Ending demo
quit