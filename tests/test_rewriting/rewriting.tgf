@use_char_class eof, space, digit, xdigit, alpha, alnum, punct, printable.

# whitespace and comments
eol            => '\n' | '\r' | eof.
ws_comment     => '#' eol | '#' printable+ eol.
ws_required    => space ws | ws_comment ws.
ws             => ws_required | null.

# characters
hex_escape     => "\\x" xdigit xdigit.
unicode_escape => "\\u" xdigit xdigit xdigit xdigit.
char_escape_encode => hex_escape | unicode_escape.

# defining char/string/qstring as all chars but its wrapping character
# enables using TAB and new lines in char(')/string(")/bqstring(`)
# sequences
esc            => "\\\\".
q_char         => '\''.
q_str          => '"'.
q_bqstr        => '`'.
char_punct     => punct & ~q_char & ~q_str & ~q_bqstr
		& ~(esc q_char) & ~(esc q_str) & ~(esc q_bqstr).
char0          => alnum | space | char_escape_encode | char_punct.
char_          => char0 | esc q_char |     q_str |     q_bqstr.
string_char    => char0 |     q_char | esc q_str |     q_bqstr.
bqstring_char  => char0 |     q_char |     q_str | esc q_bqstr.
chars          => alpha (alnum)*.

# elements
sym            => chars.
ignore           => "?_".
var           => '?' chars.

# term
term           => relname args | relname.
args           => ws '(' ws elems ws ')' | ws '(' ws ')'.
elems          => elem | elem ws_required elems_rest | term
		| term ws elems_rest.
elems_rest     => elem | elem ws_required elems_rest.
elem           => sym | var | ignore.
relname        => sym.

char_class    => "eof" | "alnum" | "alpha" | "digit"
		| "printable" | "punct" | "space"
		| "xdigit".

rule		   => term ws "<=" ws term ws '.'.
rules          => (ws rule)*.
input 		   => ws term ws .
output		   => ws term ws .
test		   => input ws '=' ws output ws '.'.
start          => ws rules ws test.
